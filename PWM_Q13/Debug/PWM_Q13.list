
PWM_Q13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000039c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000524  0800052c  0000152c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000524  08000524  0000152c  2**0
                  CONTENTS
  4 .ARM          00000000  08000524  08000524  0000152c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000524  0800052c  0000152c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00001524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000528  08000528  00001528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000152c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000152c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000132e  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c2  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00002d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  00002e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180ee  00000000  00000000  00002eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013c9  00000000  00000000  0001af99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd35  00000000  00000000  0001c362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8097  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001ac  00000000  00000000  000a80dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  000a82a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800050c 	.word	0x0800050c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800050c 	.word	0x0800050c

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int16_t ccr;
		SystemInit();
 80001ce:	f000 f919 	bl	8000404 <SystemInit>
		pwm_init();
 80001d2:	f000 f837 	bl	8000244 <pwm_init>
		switchinit();
 80001d6:	f000 f8b7 	bl	8000348 <switchinit>
		while(1) {
			while(switch_extintr_flag  == 0)
 80001da:	bf00      	nop
 80001dc:	4b17      	ldr	r3, [pc, #92]	@ (800023c <main+0x74>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0fb      	beq.n	80001dc <main+0x14>
							;
			ccr = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	80fb      	strh	r3, [r7, #6]
			while(ccr <= 100){
 80001e8:	e00d      	b.n	8000206 <main+0x3e>
			while(switch_is_pressed() == 0)
 80001ea:	bf00      	nop
 80001ec:	f000 f8e0 	bl	80003b0 <switch_is_pressed>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0fa      	beq.n	80001ec <main+0x24>
				;

				TIM8->CCR1 = ccr;
 80001f6:	4a12      	ldr	r2, [pc, #72]	@ (8000240 <main+0x78>)
 80001f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001fc:	6353      	str	r3, [r2, #52]	@ 0x34
				ccr += 10;
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	330a      	adds	r3, #10
 8000202:	b29b      	uxth	r3, r3
 8000204:	80fb      	strh	r3, [r7, #6]
			while(ccr <= 100){
 8000206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800020a:	2b64      	cmp	r3, #100	@ 0x64
 800020c:	dded      	ble.n	80001ea <main+0x22>
			}
			ccr = 100;
 800020e:	2364      	movs	r3, #100	@ 0x64
 8000210:	80fb      	strh	r3, [r7, #6]
			while(ccr >= 0) {
 8000212:	e00d      	b.n	8000230 <main+0x68>
		while(switch_is_pressed() == 0)
 8000214:	bf00      	nop
 8000216:	f000 f8cb 	bl	80003b0 <switch_is_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0fa      	beq.n	8000216 <main+0x4e>
						;
				TIM8->CCR1 = ccr;
 8000220:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <main+0x78>)
 8000222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000226:	6353      	str	r3, [r2, #52]	@ 0x34
				ccr -= 10;
 8000228:	88fb      	ldrh	r3, [r7, #6]
 800022a:	3b0a      	subs	r3, #10
 800022c:	b29b      	uxth	r3, r3
 800022e:	80fb      	strh	r3, [r7, #6]
			while(ccr >= 0) {
 8000230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000234:	2b00      	cmp	r3, #0
 8000236:	daed      	bge.n	8000214 <main+0x4c>
			while(switch_extintr_flag  == 0)
 8000238:	e7cf      	b.n	80001da <main+0x12>
 800023a:	bf00      	nop
 800023c:	2000001c 	.word	0x2000001c
 8000240:	40010400 	.word	0x40010400

08000244 <pwm_init>:
 *      Author: vb
 */

#include "pwm.h"

void pwm_init(void){
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	// gpoi pc6 ..tim8 ch1
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000248:	4b2e      	ldr	r3, [pc, #184]	@ (8000304 <pwm_init+0xc0>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024c:	4a2d      	ldr	r2, [pc, #180]	@ (8000304 <pwm_init+0xc0>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER |= BV(6*2+1);
 8000254:	4b2c      	ldr	r3, [pc, #176]	@ (8000308 <pwm_init+0xc4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a2b      	ldr	r2, [pc, #172]	@ (8000308 <pwm_init+0xc4>)
 800025a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800025e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~BV(6*2);
 8000260:	4b29      	ldr	r3, [pc, #164]	@ (8000308 <pwm_init+0xc4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a28      	ldr	r2, [pc, #160]	@ (8000308 <pwm_init+0xc4>)
 8000266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800026a:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= BV(24) | BV(25);
 800026c:	4b26      	ldr	r3, [pc, #152]	@ (8000308 <pwm_init+0xc4>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a25      	ldr	r2, [pc, #148]	@ (8000308 <pwm_init+0xc4>)
 8000272:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000276:	6213      	str	r3, [r2, #32]

	//PWM SETUP
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000278:	4b22      	ldr	r3, [pc, #136]	@ (8000304 <pwm_init+0xc0>)
 800027a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800027c:	4a21      	ldr	r2, [pc, #132]	@ (8000304 <pwm_init+0xc0>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6453      	str	r3, [r2, #68]	@ 0x44
	//	* PCLK = 16MHz, PSC = 16 --> TCLK = 1MHz
	//	* ARR = 100 => PWM output freq = TCLK / ARR = 1 MHz / 100 = 10 KHz
	TIM8->ARR = ARR_VAL;
 8000284:	4b21      	ldr	r3, [pc, #132]	@ (800030c <pwm_init+0xc8>)
 8000286:	2264      	movs	r2, #100	@ 0x64
 8000288:	62da      	str	r2, [r3, #44]	@ 0x2c
	//CCR = 0 = 0% DUTY CYCL
	TIM8->CCR1 = 0;
 800028a:	4b20      	ldr	r3, [pc, #128]	@ (800030c <pwm_init+0xc8>)
 800028c:	2200      	movs	r2, #0
 800028e:	635a      	str	r2, [r3, #52]	@ 0x34
	//o/p mode 00 ccmrx reg
	TIM8->CCMR1 &= ~(TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC1S_1);
 8000290:	4b1e      	ldr	r3, [pc, #120]	@ (800030c <pwm_init+0xc8>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a1d      	ldr	r2, [pc, #116]	@ (800030c <pwm_init+0xc8>)
 8000296:	f023 0303 	bic.w	r3, r3, #3
 800029a:	6193      	str	r3, [r2, #24]
	//CCZP 0 - ACTIVE HIGH  CCER
	TIM8-> CCER &= ~TIM_CCER_CC1P;
 800029c:	4b1b      	ldr	r3, [pc, #108]	@ (800030c <pwm_init+0xc8>)
 800029e:	6a1b      	ldr	r3, [r3, #32]
 80002a0:	4a1a      	ldr	r2, [pc, #104]	@ (800030c <pwm_init+0xc8>)
 80002a2:	f023 0302 	bic.w	r3, r3, #2
 80002a6:	6213      	str	r3, [r2, #32]
	//PWM MODE1 110
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80002a8:	4b18      	ldr	r3, [pc, #96]	@ (800030c <pwm_init+0xc8>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a17      	ldr	r2, [pc, #92]	@ (800030c <pwm_init+0xc8>)
 80002ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002b2:	6193      	str	r3, [r2, #24]
	//CCMR1 - PRELOAD SET, CR1 - ARPE SET
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 80002b4:	4b15      	ldr	r3, [pc, #84]	@ (800030c <pwm_init+0xc8>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a14      	ldr	r2, [pc, #80]	@ (800030c <pwm_init+0xc8>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6193      	str	r3, [r2, #24]
	TIM8->CR1 |= TIM_CR1_ARPE;
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <pwm_init+0xc8>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <pwm_init+0xc8>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ca:	6013      	str	r3, [r2, #0]
	//Counting mode 00 edge aligned mode
	TIM8->CR1 &= ~(TIM_CR1_CMS_0 | TIM_CR1_CMS_1);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <pwm_init+0xc8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <pwm_init+0xc8>)
 80002d2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80002d6:	6013      	str	r3, [r2, #0]
	//EN CCER
	TIM8->CCER |= TIM_CCER_CC1E;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <pwm_init+0xc8>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a0b      	ldr	r2, [pc, #44]	@ (800030c <pwm_init+0xc8>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6213      	str	r3, [r2, #32]
	//EN OP IN BDTR & EN CNTR
	TIM8->BDTR |= TIM_BDTR_MOE;
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <pwm_init+0xc8>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e8:	4a08      	ldr	r2, [pc, #32]	@ (800030c <pwm_init+0xc8>)
 80002ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ee:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM8->CR1 |= TIM_CR1_CEN;
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <pwm_init+0xc8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a05      	ldr	r2, [pc, #20]	@ (800030c <pwm_init+0xc8>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40020800 	.word	0x40020800
 800030c:	40010400 	.word	0x40010400

08000310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	2b00      	cmp	r3, #0
 8000320:	db0b      	blt.n	800033a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 021f 	and.w	r2, r3, #31
 8000328:	4906      	ldr	r1, [pc, #24]	@ (8000344 <__NVIC_EnableIRQ+0x34>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	095b      	lsrs	r3, r3, #5
 8000330:	2001      	movs	r0, #1
 8000332:	fa00 f202 	lsl.w	r2, r0, r2
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100

08000348 <switchinit>:
 */
#include "switch.h"
#include "pwm.h"

void switchinit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	//enbl GPIOA clock
	RCC->AHB1ENR |= BV(GPIO_SWITCH_CLKEN);
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <switchinit+0x58>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <switchinit+0x58>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30
	//MODER 00
	GPIO_SWITCH->MODER &= ~(BV(SWITCH_PIN*2) | BV(SWITCH_PIN*2+1));
 8000358:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <switchinit+0x5c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a11      	ldr	r2, [pc, #68]	@ (80003a4 <switchinit+0x5c>)
 800035e:	f023 0303 	bic.w	r3, r3, #3
 8000362:	6013      	str	r3, [r2, #0]
	//PUPDR 00
	GPIO_SWITCH->PUPDR &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 8000364:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <switchinit+0x5c>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <switchinit+0x5c>)
 800036a:	f023 0303 	bic.w	r3, r3, #3
 800036e:	60d3      	str	r3, [r2, #12]
	//EN FALLING EDGE DETECTION
	EXTI->FTSR |= BV(SWITCH_EXIT);
 8000370:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <switchinit+0x60>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a0c      	ldr	r2, [pc, #48]	@ (80003a8 <switchinit+0x60>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	60d3      	str	r3, [r2, #12]
	//EN EXT INTR IN IMR
	EXTI->IMR |= BV(SWITCH_EXIT);
 800037c:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <switchinit+0x60>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a09      	ldr	r2, [pc, #36]	@ (80003a8 <switchinit+0x60>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6013      	str	r3, [r2, #0]
	//SEL EXT INTR SYSCFG-EXTICR
	SYSCFG->EXTICR[0] &= ~(BV(3)|BV(2)|BV(1)|BV(0));
 8000388:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <switchinit+0x64>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a07      	ldr	r2, [pc, #28]	@ (80003ac <switchinit+0x64>)
 800038e:	f023 030f 	bic.w	r3, r3, #15
 8000392:	6093      	str	r3, [r2, #8]
	//EN EXT INTR NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000394:	2006      	movs	r0, #6
 8000396:	f7ff ffbb 	bl	8000310 <__NVIC_EnableIRQ>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40023800 	.word	0x40023800
 80003a4:	40020000 	.word	0x40020000
 80003a8:	40013c00 	.word	0x40013c00
 80003ac:	40013800 	.word	0x40013800

080003b0 <switch_is_pressed>:

int switch_is_pressed(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
	uint32_t idr = GPIO_SWITCH->IDR;
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <switch_is_pressed+0x28>)
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	607b      	str	r3, [r7, #4]
	//check if 0/1
	if((idr & BV(SWITCH_PIN)) == 0)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d101      	bne.n	80003ca <switch_is_pressed+0x1a>
		return 0;//sw not pressed
 80003c6:	2300      	movs	r3, #0
 80003c8:	e000      	b.n	80003cc <switch_is_pressed+0x1c>
	return 1;//sw pressed
 80003ca:	2301      	movs	r3, #1
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40020000 	.word	0x40020000

080003dc <EXTI0_IRQHandler>:

volatile uint32_t switch_extintr_flag = 0;
void EXTI0_IRQHandler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	EXTI->PR |= BV(SWITCH_EXIT);
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <EXTI0_IRQHandler+0x20>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a05      	ldr	r2, [pc, #20]	@ (80003fc <EXTI0_IRQHandler+0x20>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6153      	str	r3, [r2, #20]
	switch_extintr_flag  = 1;
 80003ec:	4b04      	ldr	r3, [pc, #16]	@ (8000400 <EXTI0_IRQHandler+0x24>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	601a      	str	r2, [r3, #0]
	//ledtoggle(LED_RED_PIN);
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40013c00 	.word	0x40013c00
 8000400:	2000001c 	.word	0x2000001c

08000404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  DWT_Init();
 8000408:	f000 f802 	bl	8000410 <DWT_Init>
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}

08000410 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <DWT_Init+0x58>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <DWT_Init+0x58>)
 800041a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800041e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <DWT_Init+0x58>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <DWT_Init+0x58>)
 8000426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800042a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <DWT_Init+0x5c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <DWT_Init+0x5c>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <DWT_Init+0x5c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0b      	ldr	r2, [pc, #44]	@ (800046c <DWT_Init+0x5c>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000444:	4b09      	ldr	r3, [pc, #36]	@ (800046c <DWT_Init+0x5c>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800044a:	bf00      	nop
    __ASM volatile ("NOP");
 800044c:	bf00      	nop
    __ASM volatile ("NOP");
 800044e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <DWT_Init+0x5c>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	2b00      	cmp	r3, #0
 8000456:	bf0c      	ite	eq
 8000458:	2301      	moveq	r3, #1
 800045a:	2300      	movne	r3, #0
 800045c:	b2db      	uxtb	r3, r3
}
 800045e:	4618      	mov	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000edf0 	.word	0xe000edf0
 800046c:	e0001000 	.word	0xe0001000

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	@ (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f7ff ffc6 	bl	8000404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	@ (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	@ (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	@ (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f000 f811 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff fe91 	bl	80001c8 <main>

080004a6 <LoopForever>:

LoopForever:
  b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b4:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 80004b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004bc:	20000020 	.word	0x20000020

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	4d0d      	ldr	r5, [pc, #52]	@ (80004fc <__libc_init_array+0x38>)
 80004c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000500 <__libc_init_array+0x3c>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	2600      	movs	r6, #0
 80004d0:	42a6      	cmp	r6, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000504 <__libc_init_array+0x40>)
 80004d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000508 <__libc_init_array+0x44>)
 80004d8:	f000 f818 	bl	800050c <_init>
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	2600      	movs	r6, #0
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ec:	4798      	blx	r3
 80004ee:	3601      	adds	r6, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f6:	4798      	blx	r3
 80004f8:	3601      	adds	r6, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000524 	.word	0x08000524
 8000500:	08000524 	.word	0x08000524
 8000504:	08000524 	.word	0x08000524
 8000508:	08000528 	.word	0x08000528

0800050c <_init>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr

08000518 <_fini>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr
