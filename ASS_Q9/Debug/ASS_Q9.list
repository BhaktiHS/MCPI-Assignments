
ASS_Q9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800164c  0800164c  0000264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001698  08001698  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001698  08001698  00002698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080016a0  080016a0  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016a0  080016a0  000026a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016a4  080016a4  000026a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080016a8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f6e  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a82  00000000  00000000  00004ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00005a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000167  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197fb  00000000  00000000  00005def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029e1  00000000  00000000  0001f5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c36d  00000000  00000000  00021fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ae338  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b0c  00000000  00000000  000ae37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  000aeea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001634 	.word	0x08001634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001634 	.word	0x08001634

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <LIS_WriteIO>:
#include <SPI.h>
#include "ACCEL.h"

void LIS_WriteIO(uint8_t reg, uint8_t data[], uint8_t size)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
	SPI_CS_Enable();
 80002d0:	f000 fba8 	bl	8000a24 <SPI_CS_Enable>
	SPI_Transmit(reg);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fbc3 	bl	8000a64 <SPI_Transmit>
	for(int i=0; i<size; i++)
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	e009      	b.n	80002f8 <LIS_WriteIO+0x38>
	{
		SPI_Transmit(data[i]);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	683a      	ldr	r2, [r7, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fbb9 	bl	8000a64 <SPI_Transmit>
	for(int i=0; i<size; i++)
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3301      	adds	r3, #1
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbf1      	blt.n	80002e4 <LIS_WriteIO+0x24>
	}
	SPI_CS_Disable();
 8000300:	f000 fba0 	bl	8000a44 <SPI_CS_Disable>
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <LIS_ReadIO>:

void LIS_ReadIO(uint8_t reg, uint8_t data[], uint8_t size)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	reg |= BV(7);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000322:	71fb      	strb	r3, [r7, #7]
	SPI_CS_Enable();
 8000324:	f000 fb7e 	bl	8000a24 <SPI_CS_Enable>
	SPI_Transmit(reg);
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	b29b      	uxth	r3, r3
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fb99 	bl	8000a64 <SPI_Transmit>
	for(int i=0; i<size; i++)
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	e00b      	b.n	8000350 <LIS_ReadIO+0x44>
	{
		data[i] = SPI_Receive();
 8000338:	f000 fbb6 	bl	8000aa8 <SPI_Receive>
 800033c:	4603      	mov	r3, r0
 800033e:	4619      	mov	r1, r3
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	4413      	add	r3, r2
 8000346:	b2ca      	uxtb	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbef      	blt.n	8000338 <LIS_ReadIO+0x2c>
	}
	SPI_CS_Disable();
 8000358:	f000 fb74 	bl	8000a44 <SPI_CS_Disable>
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <LIS_Init>:

void LIS_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	SPI_Init();
 800036a:	f000 faf3 	bl	8000954 <SPI_Init>
	DelayMs(3);
 800036e:	2003      	movs	r0, #3
 8000370:	f7ff ff7e 	bl	8000270 <DelayMs>
	uint8_t config = (LIS_DATARATE_25 | LIS_XYZ_ENABLE);
 8000374:	2347      	movs	r3, #71	@ 0x47
 8000376:	71fb      	strb	r3, [r7, #7]
	LIS_WriteIO(LIS_CTRL_REG4_ADDR, &config, 1);
 8000378:	1dfb      	adds	r3, r7, #7
 800037a:	2201      	movs	r2, #1
 800037c:	4619      	mov	r1, r3
 800037e:	2020      	movs	r0, #32
 8000380:	f7ff ff9e 	bl	80002c0 <LIS_WriteIO>
	DelayMs(3);
 8000384:	2003      	movs	r0, #3
 8000386:	f7ff ff73 	bl	8000270 <DelayMs>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <LIS_GetData>:

LIS_Data LIS_GetData(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b086      	sub	sp, #24
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t x, y, z;
	LIS_ReadIO(LIS_OUT_X_L_ADDR, data, 2);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	2202      	movs	r2, #2
 80003a0:	4619      	mov	r1, r3
 80003a2:	2028      	movs	r0, #40	@ 0x28
 80003a4:	f7ff ffb2 	bl	800030c <LIS_ReadIO>
	x = ((uint16_t)data[1] << 8) | data[0];
 80003a8:	7c7b      	ldrb	r3, [r7, #17]
 80003aa:	021b      	lsls	r3, r3, #8
 80003ac:	b21a      	sxth	r2, r3
 80003ae:	7c3b      	ldrb	r3, [r7, #16]
 80003b0:	b21b      	sxth	r3, r3
 80003b2:	4313      	orrs	r3, r2
 80003b4:	b21b      	sxth	r3, r3
 80003b6:	82fb      	strh	r3, [r7, #22]
	LIS_ReadIO(LIS_OUT_Y_L_ADDR, data, 2);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	2202      	movs	r2, #2
 80003be:	4619      	mov	r1, r3
 80003c0:	202a      	movs	r0, #42	@ 0x2a
 80003c2:	f7ff ffa3 	bl	800030c <LIS_ReadIO>
	y = ((uint16_t)data[1] << 8) | data[0];
 80003c6:	7c7b      	ldrb	r3, [r7, #17]
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	b21a      	sxth	r2, r3
 80003cc:	7c3b      	ldrb	r3, [r7, #16]
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	82bb      	strh	r3, [r7, #20]
	LIS_ReadIO(LIS_OUT_Z_L_ADDR, data, 2);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2202      	movs	r2, #2
 80003dc:	4619      	mov	r1, r3
 80003de:	202c      	movs	r0, #44	@ 0x2c
 80003e0:	f7ff ff94 	bl	800030c <LIS_ReadIO>
	z = ((uint16_t)data[1] << 8) | data[0];
 80003e4:	7c7b      	ldrb	r3, [r7, #17]
 80003e6:	021b      	lsls	r3, r3, #8
 80003e8:	b21a      	sxth	r2, r3
 80003ea:	7c3b      	ldrb	r3, [r7, #16]
 80003ec:	b21b      	sxth	r3, r3
 80003ee:	4313      	orrs	r3, r2
 80003f0:	b21b      	sxth	r3, r3
 80003f2:	827b      	strh	r3, [r7, #18]
	LIS_Data val;
	val.x = x;
 80003f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003f8:	813b      	strh	r3, [r7, #8]
	val.y = y;
 80003fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80003fe:	817b      	strh	r3, [r7, #10]
	val.z = z;
 8000400:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000404:	81bb      	strh	r3, [r7, #12]
	return val;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	461a      	mov	r2, r3
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	6010      	str	r0, [r2, #0]
 8000412:	889b      	ldrh	r3, [r3, #4]
 8000414:	8093      	strh	r3, [r2, #4]
}
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <LIS_DRdy>:

int LIS_DRdy(void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
	uint8_t status;
	do
	{
		LIS_ReadIO(LIS_STATUS_ADDR, &status, 1);
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	2201      	movs	r2, #1
 8000428:	4619      	mov	r1, r3
 800042a:	2027      	movs	r0, #39	@ 0x27
 800042c:	f7ff ff6e 	bl	800030c <LIS_ReadIO>
	} while( (status & LIS_STATUS_XYZ_Msk) == 0 );
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	f003 0307 	and.w	r3, r3, #7
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f4      	beq.n	8000424 <LIS_DRdy+0x6>
	return 1;
 800043a:	2301      	movs	r3, #1
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <I2C_Init>:
#include <I2C.h>

void I2C_Init(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000448:	4b2c      	ldr	r3, [pc, #176]	@ (80004fc <I2C_Init+0xb8>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044c:	4a2b      	ldr	r2, [pc, #172]	@ (80004fc <I2C_Init+0xb8>)
 800044e:	f043 0302 	orr.w	r3, r3, #2
 8000452:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |= (BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1));
 8000454:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <I2C_Init+0xbc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a29      	ldr	r2, [pc, #164]	@ (8000500 <I2C_Init+0xbc>)
 800045a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800045e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(SCL_PIN*2) | BV(SDA_PIN*2));
 8000460:	4b27      	ldr	r3, [pc, #156]	@ (8000500 <I2C_Init+0xbc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a26      	ldr	r2, [pc, #152]	@ (8000500 <I2C_Init+0xbc>)
 8000466:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 800046a:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1) | BV(SCL_PIN*2) | BV(SDA_PIN*2));
 800046c:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <I2C_Init+0xbc>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a23      	ldr	r2, [pc, #140]	@ (8000500 <I2C_Init+0xbc>)
 8000472:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000476:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[0] |= BV(30) | BV(26);
 8000478:	4b21      	ldr	r3, [pc, #132]	@ (8000500 <I2C_Init+0xbc>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a20      	ldr	r2, [pc, #128]	@ (8000500 <I2C_Init+0xbc>)
 800047e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000482:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] &= ~(BV(31) | BV(29) | BV(28) | BV(27) | BV(25) | BV(24));
 8000484:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <I2C_Init+0xbc>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a1d      	ldr	r2, [pc, #116]	@ (8000500 <I2C_Init+0xbc>)
 800048a:	f023 433b 	bic.w	r3, r3, #3137339392	@ 0xbb000000
 800048e:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000490:	4b1a      	ldr	r3, [pc, #104]	@ (80004fc <I2C_Init+0xb8>)
 8000492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000494:	4a19      	ldr	r2, [pc, #100]	@ (80004fc <I2C_Init+0xb8>)
 8000496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800049a:	6413      	str	r3, [r2, #64]	@ 0x40

    I2C1->CR1 = I2C_CR1_SWRST;
 800049c:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <I2C_Init+0xc0>)
 800049e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004a2:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 80004a4:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <I2C_Init+0xc0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
    I2C1->CR2 |= 16;
 80004aa:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <I2C_Init+0xc0>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	4a15      	ldr	r2, [pc, #84]	@ (8000504 <I2C_Init+0xc0>)
 80004b0:	f043 0310 	orr.w	r3, r3, #16
 80004b4:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~I2C_CCR_FS;
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <I2C_Init+0xc0>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a12      	ldr	r2, [pc, #72]	@ (8000504 <I2C_Init+0xc0>)
 80004bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004c0:	61d3      	str	r3, [r2, #28]
    I2C1->CCR |= 80;
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <I2C_Init+0xc0>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000504 <I2C_Init+0xc0>)
 80004c8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80004cc:	61d3      	str	r3, [r2, #28]
    I2C1->TRISE |= 17;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <I2C_Init+0xc0>)
 80004d0:	6a1b      	ldr	r3, [r3, #32]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000504 <I2C_Init+0xc0>)
 80004d4:	f043 0311 	orr.w	r3, r3, #17
 80004d8:	6213      	str	r3, [r2, #32]
    I2C1->CR1 |= I2C_CR1_ACK;
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <I2C_Init+0xc0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a09      	ldr	r2, [pc, #36]	@ (8000504 <I2C_Init+0xc0>)
 80004e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e4:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_PE;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <I2C_Init+0xc0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a06      	ldr	r2, [pc, #24]	@ (8000504 <I2C_Init+0xc0>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40023800 	.word	0x40023800
 8000500:	40020400 	.word	0x40020400
 8000504:	40005400 	.word	0x40005400

08000508 <I2C_Start>:

void I2C_Start(void) {
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

    I2C1->CR1 |= I2C_CR1_START;
 800050c:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <I2C_Start+0x2c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <I2C_Start+0x2c>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000516:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000518:	bf00      	nop
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <I2C_Start+0x2c>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f9      	beq.n	800051a <I2C_Start+0x12>
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40005400 	.word	0x40005400

08000538 <I2C_Stop>:
{
	I2C_Start();
}

void I2C_Stop(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 800053c:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <I2C_Stop+0x2c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <I2C_Stop+0x2c>)
 8000542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000546:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000548:	bf00      	nop
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <I2C_Stop+0x2c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f9      	beq.n	800054a <I2C_Stop+0x12>
}
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40005400 	.word	0x40005400

08000568 <I2C_SendSlaveAddr>:

void I2C_SendSlaveAddr(uint8_t slaveAddr)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = slaveAddr;
 8000572:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <I2C_SendSlaveAddr+0x34>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000578:	bf00      	nop
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <I2C_SendSlaveAddr+0x34>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f9      	beq.n	800057a <I2C_SendSlaveAddr+0x12>
    (void)I2C1->SR1;
 8000586:	4b05      	ldr	r3, [pc, #20]	@ (800059c <I2C_SendSlaveAddr+0x34>)
 8000588:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800058a:	4b04      	ldr	r3, [pc, #16]	@ (800059c <I2C_SendSlaveAddr+0x34>)
 800058c:	699b      	ldr	r3, [r3, #24]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40005400 	.word	0x40005400

080005a0 <I2C_SendData>:

void I2C_SendData(uint8_t data)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 80005aa:	bf00      	nop
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <I2C_SendData+0x3c>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f9      	beq.n	80005ac <I2C_SendData+0xc>
	I2C1->DR = data;
 80005b8:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <I2C_SendData+0x3c>)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <I2C_SendData+0x3c>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f9      	beq.n	80005c0 <I2C_SendData+0x20>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40005400 	.word	0x40005400

080005e0 <I2C_IsDeviceReady>:
	uint16_t val = I2C1->DR;
	return val;
}

int I2C_IsDeviceReady(uint8_t slaveAddr)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = slaveAddr;
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <I2C_IsDeviceReady+0x34>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <I2C_IsDeviceReady+0x34>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <I2C_IsDeviceReady+0x12>
    (void)I2C1->SR1;
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <I2C_IsDeviceReady+0x34>)
 8000600:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000602:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <I2C_IsDeviceReady+0x34>)
 8000604:	699b      	ldr	r3, [r3, #24]
    return 1;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40005400 	.word	0x40005400

08000618 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <DelayMs+0x44>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <DelayMs+0x48>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <DelayMs+0x4c>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	099b      	lsrs	r3, r3, #6
 8000632:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <DelayMs+0x44>)
 8000642:	685a      	ldr	r2, [r3, #4]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	1ad2      	subs	r2, r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	429a      	cmp	r2, r3
 800064c:	d3f8      	bcc.n	8000640 <DelayMs+0x28>
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e0001000 	.word	0xe0001000
 8000660:	20000000 	.word	0x20000000
 8000664:	10624dd3 	.word	0x10624dd3

08000668 <Lcd_Write4BitAndCtrl>:
#include <I2C_LCD.h>

void Lcd_Write4BitAndCtrl(uint8_t val)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 8000672:	f7ff ff49 	bl	8000508 <I2C_Start>
	I2C_SendSlaveAddr(LCD_SLAVE_ADDR_W);
 8000676:	204e      	movs	r0, #78	@ 0x4e
 8000678:	f7ff ff76 	bl	8000568 <I2C_SendSlaveAddr>
	I2C_SendData(val);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff8e 	bl	80005a0 <I2C_SendData>
	I2C_Stop();
 8000684:	f7ff ff58 	bl	8000538 <I2C_Stop>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <Lcd_WriteByte>:

void Lcd_WriteByte(uint8_t rs, uint8_t val)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	f023 030f 	bic.w	r3, r3, #15
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b80      	cmp	r3, #128	@ 0x80
 80006b2:	bf14      	ite	ne
 80006b4:	2301      	movne	r3, #1
 80006b6:	2300      	moveq	r3, #0
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	737b      	strb	r3, [r7, #13]
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80006bc:	7bfa      	ldrb	r2, [r7, #15]
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f043 030c 	orr.w	r3, r3, #12
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffcc 	bl	8000668 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff ffa1 	bl	8000618 <DelayMs>
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_BL));
 80006d6:	7bfa      	ldrb	r2, [r7, #15]
 80006d8:	7b7b      	ldrb	r3, [r7, #13]
 80006da:	4313      	orrs	r3, r2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffbf 	bl	8000668 <Lcd_Write4BitAndCtrl>

	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80006ea:	7bba      	ldrb	r2, [r7, #14]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f043 030c 	orr.w	r3, r3, #12
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffb5 	bl	8000668 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ff8a 	bl	8000618 <DelayMs>
	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_BL));
 8000704:	7bba      	ldrb	r2, [r7, #14]
 8000706:	7b7b      	ldrb	r3, [r7, #13]
 8000708:	4313      	orrs	r3, r2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffa8 	bl	8000668 <Lcd_Write4BitAndCtrl>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Lcd_Init>:

int Lcd_Init()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	DelayMs(20);
 8000726:	2014      	movs	r0, #20
 8000728:	f7ff ff76 	bl	8000618 <DelayMs>
	I2C_Init();
 800072c:	f7ff fe8a 	bl	8000444 <I2C_Init>
	I2C_Start();
 8000730:	f7ff feea 	bl	8000508 <I2C_Start>
	int ret = I2C_IsDeviceReady(LCD_SLAVE_ADDR_W);
 8000734:	204e      	movs	r0, #78	@ 0x4e
 8000736:	f7ff ff53 	bl	80005e0 <I2C_IsDeviceReady>
 800073a:	6078      	str	r0, [r7, #4]
	I2C_Stop();
 800073c:	f7ff fefc 	bl	8000538 <I2C_Stop>
	if(!ret)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <Lcd_Init+0x2a>
		return 0;
 8000746:	2300      	movs	r3, #0
 8000748:	e04b      	b.n	80007e2 <Lcd_Init+0xc2>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800074a:	2034      	movs	r0, #52	@ 0x34
 800074c:	f7ff ff8c 	bl	8000668 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000750:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000752:	2030      	movs	r0, #48	@ 0x30
 8000754:	f7ff ff88 	bl	8000668 <Lcd_Write4BitAndCtrl>
	DelayMs(5);
 8000758:	2005      	movs	r0, #5
 800075a:	f7ff ff5d 	bl	8000618 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800075e:	2034      	movs	r0, #52	@ 0x34
 8000760:	f7ff ff82 	bl	8000668 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000764:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000766:	2030      	movs	r0, #48	@ 0x30
 8000768:	f7ff ff7e 	bl	8000668 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff53 	bl	8000618 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000772:	2034      	movs	r0, #52	@ 0x34
 8000774:	f7ff ff78 	bl	8000668 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000778:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 800077a:	2030      	movs	r0, #48	@ 0x30
 800077c:	f7ff ff74 	bl	8000668 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 8000780:	2003      	movs	r0, #3
 8000782:	f7ff ff49 	bl	8000618 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT | BV(LCD_EN));
 8000786:	2024      	movs	r0, #36	@ 0x24
 8000788:	f7ff ff6e 	bl	8000668 <Lcd_Write4BitAndCtrl>
	__NOP();
 800078c:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT);
 800078e:	2020      	movs	r0, #32
 8000790:	f7ff ff6a 	bl	8000668 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 8000794:	2003      	movs	r0, #3
 8000796:	f7ff ff3f 	bl	8000618 <DelayMs>

	Lcd_WriteByte(LCD_CMD, LCD_FN_SET_4BIT_2LINES);
 800079a:	2128      	movs	r1, #40	@ 0x28
 800079c:	2080      	movs	r0, #128	@ 0x80
 800079e:	f7ff ff77 	bl	8000690 <Lcd_WriteByte>
	DelayMs(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff38 	bl	8000618 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_CTRL);
 80007a8:	2108      	movs	r1, #8
 80007aa:	2080      	movs	r0, #128	@ 0x80
 80007ac:	f7ff ff70 	bl	8000690 <Lcd_WriteByte>
	DelayMs(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ff31 	bl	8000618 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_CLEAR);
 80007b6:	2101      	movs	r1, #1
 80007b8:	2080      	movs	r0, #128	@ 0x80
 80007ba:	f7ff ff69 	bl	8000690 <Lcd_WriteByte>
	DelayMs(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff2a 	bl	8000618 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_ENTRY_MODE);
 80007c4:	2106      	movs	r1, #6
 80007c6:	2080      	movs	r0, #128	@ 0x80
 80007c8:	f7ff ff62 	bl	8000690 <Lcd_WriteByte>
	DelayMs(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff23 	bl	8000618 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_ON);
 80007d2:	210c      	movs	r1, #12
 80007d4:	2080      	movs	r0, #128	@ 0x80
 80007d6:	f7ff ff5b 	bl	8000690 <Lcd_WriteByte>
	DelayMs(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff ff1c 	bl	8000618 <DelayMs>
	return ret;
 80007e0:	687b      	ldr	r3, [r7, #4]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <Lcd_Puts>:

void Lcd_Puts(uint8_t line, char str[])
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	6039      	str	r1, [r7, #0]
 80007f4:	71fb      	strb	r3, [r7, #7]
	int i;
	Lcd_WriteByte(LCD_CMD, line);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4619      	mov	r1, r3
 80007fa:	2080      	movs	r0, #128	@ 0x80
 80007fc:	f7ff ff48 	bl	8000690 <Lcd_WriteByte>
	DelayMs(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ff09 	bl	8000618 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e00a      	b.n	8000822 <Lcd_Puts+0x38>
		Lcd_WriteByte(LCD_DATA, str[i]);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ff3a 	bl	8000690 <Lcd_WriteByte>
	for(i=0; str[i]!='\0'; i++)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1ee      	bne.n	800080c <Lcd_Puts+0x22>
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <LedInit>:


#include "LED.h"

void LedInit(uint32_t pin)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 8000840:	4b2b      	ldr	r3, [pc, #172]	@ (80008f0 <LedInit+0xb8>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	4a2a      	ldr	r2, [pc, #168]	@ (80008f0 <LedInit+0xb8>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_LED->MODER &= ~BV(pin*2+1);
 800084c:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <LedInit+0xbc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	3201      	adds	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	43d2      	mvns	r2, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a24      	ldr	r2, [pc, #144]	@ (80008f4 <LedInit+0xbc>)
 8000862:	400b      	ands	r3, r1
 8000864:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <LedInit+0xbc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <LedInit+0xbc>)
 8000878:	430b      	orrs	r3, r1
 800087a:	6013      	str	r3, [r2, #0]
	GPIO_LED->OTYPER |= BV(pin);
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <LedInit+0xbc>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2101      	movs	r1, #1
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <LedInit+0xbc>)
 800088c:	430b      	orrs	r3, r1
 800088e:	6053      	str	r3, [r2, #4]
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <LedInit+0xbc>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	3201      	adds	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	4091      	lsls	r1, r2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	0052      	lsls	r2, r2, #1
 80008a2:	2001      	movs	r0, #1
 80008a4:	fa00 f202 	lsl.w	r2, r0, r2
 80008a8:	430a      	orrs	r2, r1
 80008aa:	43d2      	mvns	r2, r2
 80008ac:	4611      	mov	r1, r2
 80008ae:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <LedInit+0xbc>)
 80008b0:	400b      	ands	r3, r1
 80008b2:	6093      	str	r3, [r2, #8]
	GPIO_LED->PUPDR &= ~BV(pin*2+1);
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <LedInit+0xbc>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	0052      	lsls	r2, r2, #1
 80008bc:	3201      	adds	r2, #1
 80008be:	2101      	movs	r1, #1
 80008c0:	fa01 f202 	lsl.w	r2, r1, r2
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LedInit+0xbc>)
 80008ca:	400b      	ands	r3, r1
 80008cc:	60d3      	str	r3, [r2, #12]
    GPIO_LED->PUPDR |= BV(pin*2);
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <LedInit+0xbc>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	0052      	lsls	r2, r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <LedInit+0xbc>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	60d3      	str	r3, [r2, #12]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020c00 	.word	0x40020c00

080008f8 <LedOn>:

void LedOn(uint32_t pin)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	GPIO_LED->ODR |= BV(pin>>1);
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <LedOn+0x2c>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	0852      	lsrs	r2, r2, #1
 8000908:	2101      	movs	r1, #1
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <LedOn+0x2c>)
 8000912:	430b      	orrs	r3, r1
 8000914:	6153      	str	r3, [r2, #20]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40020c00 	.word	0x40020c00

08000928 <LedOff>:

void LedOff(uint32_t pin)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	GPIO_LED->ODR |= BV(pin);
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <LedOff+0x28>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	2101      	movs	r1, #1
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	4611      	mov	r1, r2
 800093e:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <LedOff+0x28>)
 8000940:	430b      	orrs	r3, r1
 8000942:	6153      	str	r3, [r2, #20]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40020c00 	.word	0x40020c00

08000954 <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <SPI_Init+0xc0>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	4a2d      	ldr	r2, [pc, #180]	@ (8000a14 <SPI_Init+0xc0>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOE->MODER |= BV(SPI_CS_PIN*2);
 8000964:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <SPI_Init+0xc4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <SPI_Init+0xc4>)
 800096a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~BV(SPI_CS_PIN*2+1);
 8000970:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <SPI_Init+0xc4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a28      	ldr	r2, [pc, #160]	@ (8000a18 <SPI_Init+0xc4>)
 8000976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800097a:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2));
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <SPI_Init+0xc4>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4a25      	ldr	r2, [pc, #148]	@ (8000a18 <SPI_Init+0xc4>)
 8000982:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000986:	6093      	str	r3, [r2, #8]
	GPIOE->OTYPER &= ~BV(SPI_CS_PIN);
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <SPI_Init+0xc4>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a22      	ldr	r2, [pc, #136]	@ (8000a18 <SPI_Init+0xc4>)
 800098e:	f023 0308 	bic.w	r3, r3, #8
 8000992:	6053      	str	r3, [r2, #4]
	GPIOE->PUPDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2));
 8000994:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <SPI_Init+0xc4>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4a1f      	ldr	r2, [pc, #124]	@ (8000a18 <SPI_Init+0xc4>)
 800099a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800099e:	60d3      	str	r3, [r2, #12]

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <SPI_Init+0xc0>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <SPI_Init+0xc0>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(BV(SPI_SCLK_PIN*2) | BV(SPI_MOSI_PIN*2) | BV(SPI_MISO_PIN*2));
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <SPI_Init+0xc8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a1c <SPI_Init+0xc8>)
 80009b2:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 80009b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= BV(SPI_SCLK_PIN*2+1) | BV(SPI_MOSI_PIN*2+1) | BV(SPI_MISO_PIN*2+1);
 80009b8:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <SPI_Init+0xc8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <SPI_Init+0xc8>)
 80009be:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80009c2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= BV(30) | BV(28) | BV(26) | BV(24) | BV(22) | BV(20);
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <SPI_Init+0xc8>)
 80009c6:	6a1b      	ldr	r3, [r3, #32]
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <SPI_Init+0xc8>)
 80009ca:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80009ce:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80009d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(BV(31) | BV(29) | BV(27) | BV(25) | BV(23) | BV(21));
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <SPI_Init+0xc8>)
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <SPI_Init+0xc8>)
 80009da:	f023 432a 	bic.w	r3, r3, #2852126720	@ 0xaa000000
 80009de:	f423 0320 	bic.w	r3, r3, #10485760	@ 0xa00000
 80009e2:	6213      	str	r3, [r2, #32]

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <SPI_Init+0xc0>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <SPI_Init+0xc0>)
 80009ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ee:	6453      	str	r3, [r2, #68]	@ 0x44
	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <SPI_Init+0xcc>)
 80009f2:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80009f6:	601a      	str	r2, [r3, #0]
	SPI1->CR2 = 0x0000;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <SPI_Init+0xcc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SPE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <SPI_Init+0xcc>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <SPI_Init+0xcc>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40013000 	.word	0x40013000

08000a24 <SPI_CS_Enable>:

void SPI_CS_Enable(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	GPIOE->ODR &= ~BV(SPI_CS_PIN);
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <SPI_CS_Enable+0x1c>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <SPI_CS_Enable+0x1c>)
 8000a2e:	f023 0308 	bic.w	r3, r3, #8
 8000a32:	6153      	str	r3, [r2, #20]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <SPI_CS_Disable>:

void SPI_CS_Disable(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	GPIOE->ODR |= BV(SPI_CS_PIN);
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <SPI_CS_Disable+0x1c>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <SPI_CS_Disable+0x1c>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6153      	str	r3, [r2, #20]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <SPI_Transmit>:

uint16_t SPI_Transmit(uint16_t val)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
	while(!(SPI1->SR & SPI_SR_TXE));
 8000a6e:	bf00      	nop
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <SPI_Transmit+0x40>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f9      	beq.n	8000a70 <SPI_Transmit+0xc>
	SPI1->DR = val;
 8000a7c:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <SPI_Transmit+0x40>)
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));
 8000a82:	bf00      	nop
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <SPI_Transmit+0x40>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f9      	beq.n	8000a84 <SPI_Transmit+0x20>
	val = SPI1->DR;
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <SPI_Transmit+0x40>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	80fb      	strh	r3, [r7, #6]
	return val;
 8000a96:	88fb      	ldrh	r3, [r7, #6]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <SPI_Receive>:

uint16_t SPI_Receive(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint16_t val = SPI_Transmit(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ffd8 	bl	8000a64 <SPI_Transmit>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	80fb      	strh	r3, [r7, #6]
	return val;
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <DelayMs+0x44>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <DelayMs+0x48>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <DelayMs+0x4c>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	099b      	lsrs	r3, r3, #6
 8000ade:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	fb02 f303 	mul.w	r3, r2, r3
 8000ae8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000aea:	bf00      	nop
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <DelayMs+0x44>)
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d3f8      	bcc.n	8000aec <DelayMs+0x28>
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e0001000 	.word	0xe0001000
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	10624dd3 	.word	0x10624dd3

08000b14 <main>:
#include <I2C_LCD.h>
#include <SPI.h>
#include "LED.h"

int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b092      	sub	sp, #72	@ 0x48
 8000b18:	af00      	add	r7, sp, #0
	LIS_Data val;
	char str[32];
	char str1[32];
	SystemInit();
 8000b1a:	f000 f893 	bl	8000c44 <SystemInit>
	SPI_Init();
 8000b1e:	f7ff ff19 	bl	8000954 <SPI_Init>
	Lcd_Init();
 8000b22:	f7ff fdfd 	bl	8000720 <Lcd_Init>
	LIS_Init();
 8000b26:	f7ff fc1d 	bl	8000364 <LIS_Init>
	LedInit(LED_RED_PIN);
 8000b2a:	200e      	movs	r0, #14
 8000b2c:	f7ff fe84 	bl	8000838 <LedInit>
	LedInit(LED_BLUE_PIN);
 8000b30:	200f      	movs	r0, #15
 8000b32:	f7ff fe81 	bl	8000838 <LedInit>
	LedInit(LED_GREEN_PIN);
 8000b36:	200c      	movs	r0, #12
 8000b38:	f7ff fe7e 	bl	8000838 <LedInit>
	LedInit(LED_ORANGE_PIN);
 8000b3c:	200d      	movs	r0, #13
 8000b3e:	f7ff fe7b 	bl	8000838 <LedInit>
	while(1)
	{
			if(LIS_DRdy())
 8000b42:	f7ff fc6c 	bl	800041e <LIS_DRdy>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0fa      	beq.n	8000b42 <main+0x2e>
			{
				while(1)
				{
					val = LIS_GetData();
 8000b4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fc1e 	bl	8000392 <LIS_GetData>
					sprintf(str, "X=%d, Y=%d\r\n", val.x, val.y);
 8000b56:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000b60:	f107 0020 	add.w	r0, r7, #32
 8000b64:	491a      	ldr	r1, [pc, #104]	@ (8000bd0 <main+0xbc>)
 8000b66:	f000 f8cd 	bl	8000d04 <siprintf>
					sprintf(str1, "Z=%d\r\n", val.z);
 8000b6a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000b6e:	461a      	mov	r2, r3
 8000b70:	463b      	mov	r3, r7
 8000b72:	4918      	ldr	r1, [pc, #96]	@ (8000bd4 <main+0xc0>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f8c5 	bl	8000d04 <siprintf>
					Lcd_Puts(LCD_LINE1,str);
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	4619      	mov	r1, r3
 8000b80:	2080      	movs	r0, #128	@ 0x80
 8000b82:	f7ff fe32 	bl	80007ea <Lcd_Puts>
					Lcd_Puts(LCD_LINE2,str1);
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	20c0      	movs	r0, #192	@ 0xc0
 8000b8c:	f7ff fe2d 	bl	80007ea <Lcd_Puts>
					DelayMs(1000);
 8000b90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b94:	f7ff ff96 	bl	8000ac4 <DelayMs>
					if(val.x >= 3000)
 8000b98:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000b9c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	dd03      	ble.n	8000bac <main+0x98>
					{
						LedOn(LED_RED_PIN);
 8000ba4:	200e      	movs	r0, #14
 8000ba6:	f7ff fea7 	bl	80008f8 <LedOn>
 8000baa:	e002      	b.n	8000bb2 <main+0x9e>
					}
					else
					{
						LedOff(LED_RED_PIN);
 8000bac:	200e      	movs	r0, #14
 8000bae:	f7ff febb 	bl	8000928 <LedOff>
					}
					if(val.y >= 3000)
 8000bb2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000bb6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	dd03      	ble.n	8000bc6 <main+0xb2>
					{
						LedOn(LED_GREEN_PIN);
 8000bbe:	200c      	movs	r0, #12
 8000bc0:	f7ff fe9a 	bl	80008f8 <LedOn>
 8000bc4:	e7c2      	b.n	8000b4c <main+0x38>
					}
					else
					{
						LedOff(LED_GREEN_PIN);
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f7ff feae 	bl	8000928 <LedOff>
					val = LIS_GetData();
 8000bcc:	e7be      	b.n	8000b4c <main+0x38>
 8000bce:	bf00      	nop
 8000bd0:	0800164c 	.word	0x0800164c
 8000bd4:	0800165c 	.word	0x0800165c

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f000 f89c 	bl	8000d44 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	20000070 	.word	0x20000070
 8000c40:	200001c0 	.word	0x200001c0

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  DWT_Init();
 8000c48:	f000 f802 	bl	8000c50 <DWT_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <DWT_Init+0x58>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <DWT_Init+0x58>)
 8000c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000c5e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <DWT_Init+0x58>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	4a10      	ldr	r2, [pc, #64]	@ (8000ca8 <DWT_Init+0x58>)
 8000c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c6a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <DWT_Init+0x5c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <DWT_Init+0x5c>)
 8000c72:	f023 0301 	bic.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <DWT_Init+0x5c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000cac <DWT_Init+0x5c>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <DWT_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000c8a:	bf00      	nop
    __ASM volatile ("NOP");
 8000c8c:	bf00      	nop
    __ASM volatile ("NOP");
 8000c8e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <DWT_Init+0x5c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bf0c      	ite	eq
 8000c98:	2301      	moveq	r3, #1
 8000c9a:	2300      	movne	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000edf0 	.word	0xe000edf0
 8000cac:	e0001000 	.word	0xe0001000

08000cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb4:	f7ff ffc6 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cde:	f000 f837 	bl	8000d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff ff17 	bl	8000b14 <main>

08000ce6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   r0, =_estack
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000cf4:	080016a8 	.word	0x080016a8
  ldr r2, =_sbss
 8000cf8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000cfc:	200001bc 	.word	0x200001bc

08000d00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <siprintf>:
 8000d04:	b40e      	push	{r1, r2, r3}
 8000d06:	b500      	push	{lr}
 8000d08:	b09c      	sub	sp, #112	@ 0x70
 8000d0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8000d0c:	9002      	str	r0, [sp, #8]
 8000d0e:	9006      	str	r0, [sp, #24]
 8000d10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <siprintf+0x38>)
 8000d16:	9107      	str	r1, [sp, #28]
 8000d18:	9104      	str	r1, [sp, #16]
 8000d1a:	4909      	ldr	r1, [pc, #36]	@ (8000d40 <siprintf+0x3c>)
 8000d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d20:	9105      	str	r1, [sp, #20]
 8000d22:	6800      	ldr	r0, [r0, #0]
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	a902      	add	r1, sp, #8
 8000d28:	f000 f98c 	bl	8001044 <_svfiprintf_r>
 8000d2c:	9b02      	ldr	r3, [sp, #8]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	b01c      	add	sp, #112	@ 0x70
 8000d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d38:	b003      	add	sp, #12
 8000d3a:	4770      	bx	lr
 8000d3c:	20000004 	.word	0x20000004
 8000d40:	ffff0208 	.word	0xffff0208

08000d44 <__errno>:
 8000d44:	4b01      	ldr	r3, [pc, #4]	@ (8000d4c <__errno+0x8>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000004 	.word	0x20000004

08000d50 <__libc_init_array>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	4d0d      	ldr	r5, [pc, #52]	@ (8000d88 <__libc_init_array+0x38>)
 8000d54:	4c0d      	ldr	r4, [pc, #52]	@ (8000d8c <__libc_init_array+0x3c>)
 8000d56:	1b64      	subs	r4, r4, r5
 8000d58:	10a4      	asrs	r4, r4, #2
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	42a6      	cmp	r6, r4
 8000d5e:	d109      	bne.n	8000d74 <__libc_init_array+0x24>
 8000d60:	4d0b      	ldr	r5, [pc, #44]	@ (8000d90 <__libc_init_array+0x40>)
 8000d62:	4c0c      	ldr	r4, [pc, #48]	@ (8000d94 <__libc_init_array+0x44>)
 8000d64:	f000 fc66 	bl	8001634 <_init>
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	10a4      	asrs	r4, r4, #2
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	42a6      	cmp	r6, r4
 8000d70:	d105      	bne.n	8000d7e <__libc_init_array+0x2e>
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d78:	4798      	blx	r3
 8000d7a:	3601      	adds	r6, #1
 8000d7c:	e7ee      	b.n	8000d5c <__libc_init_array+0xc>
 8000d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d82:	4798      	blx	r3
 8000d84:	3601      	adds	r6, #1
 8000d86:	e7f2      	b.n	8000d6e <__libc_init_array+0x1e>
 8000d88:	080016a0 	.word	0x080016a0
 8000d8c:	080016a0 	.word	0x080016a0
 8000d90:	080016a0 	.word	0x080016a0
 8000d94:	080016a4 	.word	0x080016a4

08000d98 <__retarget_lock_acquire_recursive>:
 8000d98:	4770      	bx	lr

08000d9a <__retarget_lock_release_recursive>:
 8000d9a:	4770      	bx	lr

08000d9c <_free_r>:
 8000d9c:	b538      	push	{r3, r4, r5, lr}
 8000d9e:	4605      	mov	r5, r0
 8000da0:	2900      	cmp	r1, #0
 8000da2:	d041      	beq.n	8000e28 <_free_r+0x8c>
 8000da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000da8:	1f0c      	subs	r4, r1, #4
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bfb8      	it	lt
 8000dae:	18e4      	addlt	r4, r4, r3
 8000db0:	f000 f8e0 	bl	8000f74 <__malloc_lock>
 8000db4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e2c <_free_r+0x90>)
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	b933      	cbnz	r3, 8000dc8 <_free_r+0x2c>
 8000dba:	6063      	str	r3, [r4, #4]
 8000dbc:	6014      	str	r4, [r2, #0]
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc4:	f000 b8dc 	b.w	8000f80 <__malloc_unlock>
 8000dc8:	42a3      	cmp	r3, r4
 8000dca:	d908      	bls.n	8000dde <_free_r+0x42>
 8000dcc:	6820      	ldr	r0, [r4, #0]
 8000dce:	1821      	adds	r1, r4, r0
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	bf01      	itttt	eq
 8000dd4:	6819      	ldreq	r1, [r3, #0]
 8000dd6:	685b      	ldreq	r3, [r3, #4]
 8000dd8:	1809      	addeq	r1, r1, r0
 8000dda:	6021      	streq	r1, [r4, #0]
 8000ddc:	e7ed      	b.n	8000dba <_free_r+0x1e>
 8000dde:	461a      	mov	r2, r3
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	b10b      	cbz	r3, 8000de8 <_free_r+0x4c>
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d9fa      	bls.n	8000dde <_free_r+0x42>
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	1850      	adds	r0, r2, r1
 8000dec:	42a0      	cmp	r0, r4
 8000dee:	d10b      	bne.n	8000e08 <_free_r+0x6c>
 8000df0:	6820      	ldr	r0, [r4, #0]
 8000df2:	4401      	add	r1, r0
 8000df4:	1850      	adds	r0, r2, r1
 8000df6:	4283      	cmp	r3, r0
 8000df8:	6011      	str	r1, [r2, #0]
 8000dfa:	d1e0      	bne.n	8000dbe <_free_r+0x22>
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	6053      	str	r3, [r2, #4]
 8000e02:	4408      	add	r0, r1
 8000e04:	6010      	str	r0, [r2, #0]
 8000e06:	e7da      	b.n	8000dbe <_free_r+0x22>
 8000e08:	d902      	bls.n	8000e10 <_free_r+0x74>
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	602b      	str	r3, [r5, #0]
 8000e0e:	e7d6      	b.n	8000dbe <_free_r+0x22>
 8000e10:	6820      	ldr	r0, [r4, #0]
 8000e12:	1821      	adds	r1, r4, r0
 8000e14:	428b      	cmp	r3, r1
 8000e16:	bf04      	itt	eq
 8000e18:	6819      	ldreq	r1, [r3, #0]
 8000e1a:	685b      	ldreq	r3, [r3, #4]
 8000e1c:	6063      	str	r3, [r4, #4]
 8000e1e:	bf04      	itt	eq
 8000e20:	1809      	addeq	r1, r1, r0
 8000e22:	6021      	streq	r1, [r4, #0]
 8000e24:	6054      	str	r4, [r2, #4]
 8000e26:	e7ca      	b.n	8000dbe <_free_r+0x22>
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200001b8 	.word	0x200001b8

08000e30 <sbrk_aligned>:
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	4e0f      	ldr	r6, [pc, #60]	@ (8000e70 <sbrk_aligned+0x40>)
 8000e34:	460c      	mov	r4, r1
 8000e36:	6831      	ldr	r1, [r6, #0]
 8000e38:	4605      	mov	r5, r0
 8000e3a:	b911      	cbnz	r1, 8000e42 <sbrk_aligned+0x12>
 8000e3c:	f000 fba6 	bl	800158c <_sbrk_r>
 8000e40:	6030      	str	r0, [r6, #0]
 8000e42:	4621      	mov	r1, r4
 8000e44:	4628      	mov	r0, r5
 8000e46:	f000 fba1 	bl	800158c <_sbrk_r>
 8000e4a:	1c43      	adds	r3, r0, #1
 8000e4c:	d103      	bne.n	8000e56 <sbrk_aligned+0x26>
 8000e4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000e52:	4620      	mov	r0, r4
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	1cc4      	adds	r4, r0, #3
 8000e58:	f024 0403 	bic.w	r4, r4, #3
 8000e5c:	42a0      	cmp	r0, r4
 8000e5e:	d0f8      	beq.n	8000e52 <sbrk_aligned+0x22>
 8000e60:	1a21      	subs	r1, r4, r0
 8000e62:	4628      	mov	r0, r5
 8000e64:	f000 fb92 	bl	800158c <_sbrk_r>
 8000e68:	3001      	adds	r0, #1
 8000e6a:	d1f2      	bne.n	8000e52 <sbrk_aligned+0x22>
 8000e6c:	e7ef      	b.n	8000e4e <sbrk_aligned+0x1e>
 8000e6e:	bf00      	nop
 8000e70:	200001b4 	.word	0x200001b4

08000e74 <_malloc_r>:
 8000e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e78:	1ccd      	adds	r5, r1, #3
 8000e7a:	f025 0503 	bic.w	r5, r5, #3
 8000e7e:	3508      	adds	r5, #8
 8000e80:	2d0c      	cmp	r5, #12
 8000e82:	bf38      	it	cc
 8000e84:	250c      	movcc	r5, #12
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	4606      	mov	r6, r0
 8000e8a:	db01      	blt.n	8000e90 <_malloc_r+0x1c>
 8000e8c:	42a9      	cmp	r1, r5
 8000e8e:	d904      	bls.n	8000e9a <_malloc_r+0x26>
 8000e90:	230c      	movs	r3, #12
 8000e92:	6033      	str	r3, [r6, #0]
 8000e94:	2000      	movs	r0, #0
 8000e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f70 <_malloc_r+0xfc>
 8000e9e:	f000 f869 	bl	8000f74 <__malloc_lock>
 8000ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ea6:	461c      	mov	r4, r3
 8000ea8:	bb44      	cbnz	r4, 8000efc <_malloc_r+0x88>
 8000eaa:	4629      	mov	r1, r5
 8000eac:	4630      	mov	r0, r6
 8000eae:	f7ff ffbf 	bl	8000e30 <sbrk_aligned>
 8000eb2:	1c43      	adds	r3, r0, #1
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	d158      	bne.n	8000f6a <_malloc_r+0xf6>
 8000eb8:	f8d8 4000 	ldr.w	r4, [r8]
 8000ebc:	4627      	mov	r7, r4
 8000ebe:	2f00      	cmp	r7, #0
 8000ec0:	d143      	bne.n	8000f4a <_malloc_r+0xd6>
 8000ec2:	2c00      	cmp	r4, #0
 8000ec4:	d04b      	beq.n	8000f5e <_malloc_r+0xea>
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	4639      	mov	r1, r7
 8000eca:	4630      	mov	r0, r6
 8000ecc:	eb04 0903 	add.w	r9, r4, r3
 8000ed0:	f000 fb5c 	bl	800158c <_sbrk_r>
 8000ed4:	4581      	cmp	r9, r0
 8000ed6:	d142      	bne.n	8000f5e <_malloc_r+0xea>
 8000ed8:	6821      	ldr	r1, [r4, #0]
 8000eda:	1a6d      	subs	r5, r5, r1
 8000edc:	4629      	mov	r1, r5
 8000ede:	4630      	mov	r0, r6
 8000ee0:	f7ff ffa6 	bl	8000e30 <sbrk_aligned>
 8000ee4:	3001      	adds	r0, #1
 8000ee6:	d03a      	beq.n	8000f5e <_malloc_r+0xea>
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	442b      	add	r3, r5
 8000eec:	6023      	str	r3, [r4, #0]
 8000eee:	f8d8 3000 	ldr.w	r3, [r8]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	bb62      	cbnz	r2, 8000f50 <_malloc_r+0xdc>
 8000ef6:	f8c8 7000 	str.w	r7, [r8]
 8000efa:	e00f      	b.n	8000f1c <_malloc_r+0xa8>
 8000efc:	6822      	ldr	r2, [r4, #0]
 8000efe:	1b52      	subs	r2, r2, r5
 8000f00:	d420      	bmi.n	8000f44 <_malloc_r+0xd0>
 8000f02:	2a0b      	cmp	r2, #11
 8000f04:	d917      	bls.n	8000f36 <_malloc_r+0xc2>
 8000f06:	1961      	adds	r1, r4, r5
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	6025      	str	r5, [r4, #0]
 8000f0c:	bf18      	it	ne
 8000f0e:	6059      	strne	r1, [r3, #4]
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	bf08      	it	eq
 8000f14:	f8c8 1000 	streq.w	r1, [r8]
 8000f18:	5162      	str	r2, [r4, r5]
 8000f1a:	604b      	str	r3, [r1, #4]
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f000 f82f 	bl	8000f80 <__malloc_unlock>
 8000f22:	f104 000b 	add.w	r0, r4, #11
 8000f26:	1d23      	adds	r3, r4, #4
 8000f28:	f020 0007 	bic.w	r0, r0, #7
 8000f2c:	1ac2      	subs	r2, r0, r3
 8000f2e:	bf1c      	itt	ne
 8000f30:	1a1b      	subne	r3, r3, r0
 8000f32:	50a3      	strne	r3, [r4, r2]
 8000f34:	e7af      	b.n	8000e96 <_malloc_r+0x22>
 8000f36:	6862      	ldr	r2, [r4, #4]
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	bf0c      	ite	eq
 8000f3c:	f8c8 2000 	streq.w	r2, [r8]
 8000f40:	605a      	strne	r2, [r3, #4]
 8000f42:	e7eb      	b.n	8000f1c <_malloc_r+0xa8>
 8000f44:	4623      	mov	r3, r4
 8000f46:	6864      	ldr	r4, [r4, #4]
 8000f48:	e7ae      	b.n	8000ea8 <_malloc_r+0x34>
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	687f      	ldr	r7, [r7, #4]
 8000f4e:	e7b6      	b.n	8000ebe <_malloc_r+0x4a>
 8000f50:	461a      	mov	r2, r3
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	42a3      	cmp	r3, r4
 8000f56:	d1fb      	bne.n	8000f50 <_malloc_r+0xdc>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6053      	str	r3, [r2, #4]
 8000f5c:	e7de      	b.n	8000f1c <_malloc_r+0xa8>
 8000f5e:	230c      	movs	r3, #12
 8000f60:	6033      	str	r3, [r6, #0]
 8000f62:	4630      	mov	r0, r6
 8000f64:	f000 f80c 	bl	8000f80 <__malloc_unlock>
 8000f68:	e794      	b.n	8000e94 <_malloc_r+0x20>
 8000f6a:	6005      	str	r5, [r0, #0]
 8000f6c:	e7d6      	b.n	8000f1c <_malloc_r+0xa8>
 8000f6e:	bf00      	nop
 8000f70:	200001b8 	.word	0x200001b8

08000f74 <__malloc_lock>:
 8000f74:	4801      	ldr	r0, [pc, #4]	@ (8000f7c <__malloc_lock+0x8>)
 8000f76:	f7ff bf0f 	b.w	8000d98 <__retarget_lock_acquire_recursive>
 8000f7a:	bf00      	nop
 8000f7c:	200001b0 	.word	0x200001b0

08000f80 <__malloc_unlock>:
 8000f80:	4801      	ldr	r0, [pc, #4]	@ (8000f88 <__malloc_unlock+0x8>)
 8000f82:	f7ff bf0a 	b.w	8000d9a <__retarget_lock_release_recursive>
 8000f86:	bf00      	nop
 8000f88:	200001b0 	.word	0x200001b0

08000f8c <__ssputs_r>:
 8000f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f90:	688e      	ldr	r6, [r1, #8]
 8000f92:	461f      	mov	r7, r3
 8000f94:	42be      	cmp	r6, r7
 8000f96:	680b      	ldr	r3, [r1, #0]
 8000f98:	4682      	mov	sl, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4690      	mov	r8, r2
 8000f9e:	d82d      	bhi.n	8000ffc <__ssputs_r+0x70>
 8000fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000fa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000fa8:	d026      	beq.n	8000ff8 <__ssputs_r+0x6c>
 8000faa:	6965      	ldr	r5, [r4, #20]
 8000fac:	6909      	ldr	r1, [r1, #16]
 8000fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000fb2:	eba3 0901 	sub.w	r9, r3, r1
 8000fb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000fba:	1c7b      	adds	r3, r7, #1
 8000fbc:	444b      	add	r3, r9
 8000fbe:	106d      	asrs	r5, r5, #1
 8000fc0:	429d      	cmp	r5, r3
 8000fc2:	bf38      	it	cc
 8000fc4:	461d      	movcc	r5, r3
 8000fc6:	0553      	lsls	r3, r2, #21
 8000fc8:	d527      	bpl.n	800101a <__ssputs_r+0x8e>
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff ff52 	bl	8000e74 <_malloc_r>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	b360      	cbz	r0, 800102e <__ssputs_r+0xa2>
 8000fd4:	6921      	ldr	r1, [r4, #16]
 8000fd6:	464a      	mov	r2, r9
 8000fd8:	f000 fae8 	bl	80015ac <memcpy>
 8000fdc:	89a3      	ldrh	r3, [r4, #12]
 8000fde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe6:	81a3      	strh	r3, [r4, #12]
 8000fe8:	6126      	str	r6, [r4, #16]
 8000fea:	6165      	str	r5, [r4, #20]
 8000fec:	444e      	add	r6, r9
 8000fee:	eba5 0509 	sub.w	r5, r5, r9
 8000ff2:	6026      	str	r6, [r4, #0]
 8000ff4:	60a5      	str	r5, [r4, #8]
 8000ff6:	463e      	mov	r6, r7
 8000ff8:	42be      	cmp	r6, r7
 8000ffa:	d900      	bls.n	8000ffe <__ssputs_r+0x72>
 8000ffc:	463e      	mov	r6, r7
 8000ffe:	6820      	ldr	r0, [r4, #0]
 8001000:	4632      	mov	r2, r6
 8001002:	4641      	mov	r1, r8
 8001004:	f000 faa8 	bl	8001558 <memmove>
 8001008:	68a3      	ldr	r3, [r4, #8]
 800100a:	1b9b      	subs	r3, r3, r6
 800100c:	60a3      	str	r3, [r4, #8]
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	4433      	add	r3, r6
 8001012:	6023      	str	r3, [r4, #0]
 8001014:	2000      	movs	r0, #0
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	462a      	mov	r2, r5
 800101c:	f000 fad4 	bl	80015c8 <_realloc_r>
 8001020:	4606      	mov	r6, r0
 8001022:	2800      	cmp	r0, #0
 8001024:	d1e0      	bne.n	8000fe8 <__ssputs_r+0x5c>
 8001026:	6921      	ldr	r1, [r4, #16]
 8001028:	4650      	mov	r0, sl
 800102a:	f7ff feb7 	bl	8000d9c <_free_r>
 800102e:	230c      	movs	r3, #12
 8001030:	f8ca 3000 	str.w	r3, [sl]
 8001034:	89a3      	ldrh	r3, [r4, #12]
 8001036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103a:	81a3      	strh	r3, [r4, #12]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001040:	e7e9      	b.n	8001016 <__ssputs_r+0x8a>
	...

08001044 <_svfiprintf_r>:
 8001044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001048:	4698      	mov	r8, r3
 800104a:	898b      	ldrh	r3, [r1, #12]
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	b09d      	sub	sp, #116	@ 0x74
 8001050:	4607      	mov	r7, r0
 8001052:	460d      	mov	r5, r1
 8001054:	4614      	mov	r4, r2
 8001056:	d510      	bpl.n	800107a <_svfiprintf_r+0x36>
 8001058:	690b      	ldr	r3, [r1, #16]
 800105a:	b973      	cbnz	r3, 800107a <_svfiprintf_r+0x36>
 800105c:	2140      	movs	r1, #64	@ 0x40
 800105e:	f7ff ff09 	bl	8000e74 <_malloc_r>
 8001062:	6028      	str	r0, [r5, #0]
 8001064:	6128      	str	r0, [r5, #16]
 8001066:	b930      	cbnz	r0, 8001076 <_svfiprintf_r+0x32>
 8001068:	230c      	movs	r3, #12
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001070:	b01d      	add	sp, #116	@ 0x74
 8001072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001076:	2340      	movs	r3, #64	@ 0x40
 8001078:	616b      	str	r3, [r5, #20]
 800107a:	2300      	movs	r3, #0
 800107c:	9309      	str	r3, [sp, #36]	@ 0x24
 800107e:	2320      	movs	r3, #32
 8001080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001084:	f8cd 800c 	str.w	r8, [sp, #12]
 8001088:	2330      	movs	r3, #48	@ 0x30
 800108a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001228 <_svfiprintf_r+0x1e4>
 800108e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001092:	f04f 0901 	mov.w	r9, #1
 8001096:	4623      	mov	r3, r4
 8001098:	469a      	mov	sl, r3
 800109a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800109e:	b10a      	cbz	r2, 80010a4 <_svfiprintf_r+0x60>
 80010a0:	2a25      	cmp	r2, #37	@ 0x25
 80010a2:	d1f9      	bne.n	8001098 <_svfiprintf_r+0x54>
 80010a4:	ebba 0b04 	subs.w	fp, sl, r4
 80010a8:	d00b      	beq.n	80010c2 <_svfiprintf_r+0x7e>
 80010aa:	465b      	mov	r3, fp
 80010ac:	4622      	mov	r2, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	4638      	mov	r0, r7
 80010b2:	f7ff ff6b 	bl	8000f8c <__ssputs_r>
 80010b6:	3001      	adds	r0, #1
 80010b8:	f000 80a7 	beq.w	800120a <_svfiprintf_r+0x1c6>
 80010bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80010be:	445a      	add	r2, fp
 80010c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80010c2:	f89a 3000 	ldrb.w	r3, [sl]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 809f 	beq.w	800120a <_svfiprintf_r+0x1c6>
 80010cc:	2300      	movs	r3, #0
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010d6:	f10a 0a01 	add.w	sl, sl, #1
 80010da:	9304      	str	r3, [sp, #16]
 80010dc:	9307      	str	r3, [sp, #28]
 80010de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80010e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80010e4:	4654      	mov	r4, sl
 80010e6:	2205      	movs	r2, #5
 80010e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ec:	484e      	ldr	r0, [pc, #312]	@ (8001228 <_svfiprintf_r+0x1e4>)
 80010ee:	f7ff f86f 	bl	80001d0 <memchr>
 80010f2:	9a04      	ldr	r2, [sp, #16]
 80010f4:	b9d8      	cbnz	r0, 800112e <_svfiprintf_r+0xea>
 80010f6:	06d0      	lsls	r0, r2, #27
 80010f8:	bf44      	itt	mi
 80010fa:	2320      	movmi	r3, #32
 80010fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001100:	0711      	lsls	r1, r2, #28
 8001102:	bf44      	itt	mi
 8001104:	232b      	movmi	r3, #43	@ 0x2b
 8001106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800110a:	f89a 3000 	ldrb.w	r3, [sl]
 800110e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001110:	d015      	beq.n	800113e <_svfiprintf_r+0xfa>
 8001112:	9a07      	ldr	r2, [sp, #28]
 8001114:	4654      	mov	r4, sl
 8001116:	2000      	movs	r0, #0
 8001118:	f04f 0c0a 	mov.w	ip, #10
 800111c:	4621      	mov	r1, r4
 800111e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001122:	3b30      	subs	r3, #48	@ 0x30
 8001124:	2b09      	cmp	r3, #9
 8001126:	d94b      	bls.n	80011c0 <_svfiprintf_r+0x17c>
 8001128:	b1b0      	cbz	r0, 8001158 <_svfiprintf_r+0x114>
 800112a:	9207      	str	r2, [sp, #28]
 800112c:	e014      	b.n	8001158 <_svfiprintf_r+0x114>
 800112e:	eba0 0308 	sub.w	r3, r0, r8
 8001132:	fa09 f303 	lsl.w	r3, r9, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	9304      	str	r3, [sp, #16]
 800113a:	46a2      	mov	sl, r4
 800113c:	e7d2      	b.n	80010e4 <_svfiprintf_r+0xa0>
 800113e:	9b03      	ldr	r3, [sp, #12]
 8001140:	1d19      	adds	r1, r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	9103      	str	r1, [sp, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfbb      	ittet	lt
 800114a:	425b      	neglt	r3, r3
 800114c:	f042 0202 	orrlt.w	r2, r2, #2
 8001150:	9307      	strge	r3, [sp, #28]
 8001152:	9307      	strlt	r3, [sp, #28]
 8001154:	bfb8      	it	lt
 8001156:	9204      	strlt	r2, [sp, #16]
 8001158:	7823      	ldrb	r3, [r4, #0]
 800115a:	2b2e      	cmp	r3, #46	@ 0x2e
 800115c:	d10a      	bne.n	8001174 <_svfiprintf_r+0x130>
 800115e:	7863      	ldrb	r3, [r4, #1]
 8001160:	2b2a      	cmp	r3, #42	@ 0x2a
 8001162:	d132      	bne.n	80011ca <_svfiprintf_r+0x186>
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	1d1a      	adds	r2, r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	9203      	str	r2, [sp, #12]
 800116c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001170:	3402      	adds	r4, #2
 8001172:	9305      	str	r3, [sp, #20]
 8001174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001238 <_svfiprintf_r+0x1f4>
 8001178:	7821      	ldrb	r1, [r4, #0]
 800117a:	2203      	movs	r2, #3
 800117c:	4650      	mov	r0, sl
 800117e:	f7ff f827 	bl	80001d0 <memchr>
 8001182:	b138      	cbz	r0, 8001194 <_svfiprintf_r+0x150>
 8001184:	9b04      	ldr	r3, [sp, #16]
 8001186:	eba0 000a 	sub.w	r0, r0, sl
 800118a:	2240      	movs	r2, #64	@ 0x40
 800118c:	4082      	lsls	r2, r0
 800118e:	4313      	orrs	r3, r2
 8001190:	3401      	adds	r4, #1
 8001192:	9304      	str	r3, [sp, #16]
 8001194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001198:	4824      	ldr	r0, [pc, #144]	@ (800122c <_svfiprintf_r+0x1e8>)
 800119a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800119e:	2206      	movs	r2, #6
 80011a0:	f7ff f816 	bl	80001d0 <memchr>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d036      	beq.n	8001216 <_svfiprintf_r+0x1d2>
 80011a8:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <_svfiprintf_r+0x1ec>)
 80011aa:	bb1b      	cbnz	r3, 80011f4 <_svfiprintf_r+0x1b0>
 80011ac:	9b03      	ldr	r3, [sp, #12]
 80011ae:	3307      	adds	r3, #7
 80011b0:	f023 0307 	bic.w	r3, r3, #7
 80011b4:	3308      	adds	r3, #8
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80011ba:	4433      	add	r3, r6
 80011bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80011be:	e76a      	b.n	8001096 <_svfiprintf_r+0x52>
 80011c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80011c4:	460c      	mov	r4, r1
 80011c6:	2001      	movs	r0, #1
 80011c8:	e7a8      	b.n	800111c <_svfiprintf_r+0xd8>
 80011ca:	2300      	movs	r3, #0
 80011cc:	3401      	adds	r4, #1
 80011ce:	9305      	str	r3, [sp, #20]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 0c0a 	mov.w	ip, #10
 80011d6:	4620      	mov	r0, r4
 80011d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011dc:	3a30      	subs	r2, #48	@ 0x30
 80011de:	2a09      	cmp	r2, #9
 80011e0:	d903      	bls.n	80011ea <_svfiprintf_r+0x1a6>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0c6      	beq.n	8001174 <_svfiprintf_r+0x130>
 80011e6:	9105      	str	r1, [sp, #20]
 80011e8:	e7c4      	b.n	8001174 <_svfiprintf_r+0x130>
 80011ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80011ee:	4604      	mov	r4, r0
 80011f0:	2301      	movs	r3, #1
 80011f2:	e7f0      	b.n	80011d6 <_svfiprintf_r+0x192>
 80011f4:	ab03      	add	r3, sp, #12
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	462a      	mov	r2, r5
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <_svfiprintf_r+0x1f0>)
 80011fc:	a904      	add	r1, sp, #16
 80011fe:	4638      	mov	r0, r7
 8001200:	f3af 8000 	nop.w
 8001204:	1c42      	adds	r2, r0, #1
 8001206:	4606      	mov	r6, r0
 8001208:	d1d6      	bne.n	80011b8 <_svfiprintf_r+0x174>
 800120a:	89ab      	ldrh	r3, [r5, #12]
 800120c:	065b      	lsls	r3, r3, #25
 800120e:	f53f af2d 	bmi.w	800106c <_svfiprintf_r+0x28>
 8001212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001214:	e72c      	b.n	8001070 <_svfiprintf_r+0x2c>
 8001216:	ab03      	add	r3, sp, #12
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	462a      	mov	r2, r5
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <_svfiprintf_r+0x1f0>)
 800121e:	a904      	add	r1, sp, #16
 8001220:	4638      	mov	r0, r7
 8001222:	f000 f879 	bl	8001318 <_printf_i>
 8001226:	e7ed      	b.n	8001204 <_svfiprintf_r+0x1c0>
 8001228:	08001663 	.word	0x08001663
 800122c:	0800166d 	.word	0x0800166d
 8001230:	00000000 	.word	0x00000000
 8001234:	08000f8d 	.word	0x08000f8d
 8001238:	08001669 	.word	0x08001669

0800123c <_printf_common>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	4616      	mov	r6, r2
 8001242:	4698      	mov	r8, r3
 8001244:	688a      	ldr	r2, [r1, #8]
 8001246:	690b      	ldr	r3, [r1, #16]
 8001248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800124c:	4293      	cmp	r3, r2
 800124e:	bfb8      	it	lt
 8001250:	4613      	movlt	r3, r2
 8001252:	6033      	str	r3, [r6, #0]
 8001254:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001258:	4607      	mov	r7, r0
 800125a:	460c      	mov	r4, r1
 800125c:	b10a      	cbz	r2, 8001262 <_printf_common+0x26>
 800125e:	3301      	adds	r3, #1
 8001260:	6033      	str	r3, [r6, #0]
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	0699      	lsls	r1, r3, #26
 8001266:	bf42      	ittt	mi
 8001268:	6833      	ldrmi	r3, [r6, #0]
 800126a:	3302      	addmi	r3, #2
 800126c:	6033      	strmi	r3, [r6, #0]
 800126e:	6825      	ldr	r5, [r4, #0]
 8001270:	f015 0506 	ands.w	r5, r5, #6
 8001274:	d106      	bne.n	8001284 <_printf_common+0x48>
 8001276:	f104 0a19 	add.w	sl, r4, #25
 800127a:	68e3      	ldr	r3, [r4, #12]
 800127c:	6832      	ldr	r2, [r6, #0]
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	42ab      	cmp	r3, r5
 8001282:	dc26      	bgt.n	80012d2 <_printf_common+0x96>
 8001284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	3b00      	subs	r3, #0
 800128c:	bf18      	it	ne
 800128e:	2301      	movne	r3, #1
 8001290:	0692      	lsls	r2, r2, #26
 8001292:	d42b      	bmi.n	80012ec <_printf_common+0xb0>
 8001294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001298:	4641      	mov	r1, r8
 800129a:	4638      	mov	r0, r7
 800129c:	47c8      	blx	r9
 800129e:	3001      	adds	r0, #1
 80012a0:	d01e      	beq.n	80012e0 <_printf_common+0xa4>
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	6922      	ldr	r2, [r4, #16]
 80012a6:	f003 0306 	and.w	r3, r3, #6
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf02      	ittt	eq
 80012ae:	68e5      	ldreq	r5, [r4, #12]
 80012b0:	6833      	ldreq	r3, [r6, #0]
 80012b2:	1aed      	subeq	r5, r5, r3
 80012b4:	68a3      	ldr	r3, [r4, #8]
 80012b6:	bf0c      	ite	eq
 80012b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012bc:	2500      	movne	r5, #0
 80012be:	4293      	cmp	r3, r2
 80012c0:	bfc4      	itt	gt
 80012c2:	1a9b      	subgt	r3, r3, r2
 80012c4:	18ed      	addgt	r5, r5, r3
 80012c6:	2600      	movs	r6, #0
 80012c8:	341a      	adds	r4, #26
 80012ca:	42b5      	cmp	r5, r6
 80012cc:	d11a      	bne.n	8001304 <_printf_common+0xc8>
 80012ce:	2000      	movs	r0, #0
 80012d0:	e008      	b.n	80012e4 <_printf_common+0xa8>
 80012d2:	2301      	movs	r3, #1
 80012d4:	4652      	mov	r2, sl
 80012d6:	4641      	mov	r1, r8
 80012d8:	4638      	mov	r0, r7
 80012da:	47c8      	blx	r9
 80012dc:	3001      	adds	r0, #1
 80012de:	d103      	bne.n	80012e8 <_printf_common+0xac>
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e8:	3501      	adds	r5, #1
 80012ea:	e7c6      	b.n	800127a <_printf_common+0x3e>
 80012ec:	18e1      	adds	r1, r4, r3
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	2030      	movs	r0, #48	@ 0x30
 80012f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80012f6:	4422      	add	r2, r4
 80012f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80012fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001300:	3302      	adds	r3, #2
 8001302:	e7c7      	b.n	8001294 <_printf_common+0x58>
 8001304:	2301      	movs	r3, #1
 8001306:	4622      	mov	r2, r4
 8001308:	4641      	mov	r1, r8
 800130a:	4638      	mov	r0, r7
 800130c:	47c8      	blx	r9
 800130e:	3001      	adds	r0, #1
 8001310:	d0e6      	beq.n	80012e0 <_printf_common+0xa4>
 8001312:	3601      	adds	r6, #1
 8001314:	e7d9      	b.n	80012ca <_printf_common+0x8e>
	...

08001318 <_printf_i>:
 8001318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800131c:	7e0f      	ldrb	r7, [r1, #24]
 800131e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001320:	2f78      	cmp	r7, #120	@ 0x78
 8001322:	4691      	mov	r9, r2
 8001324:	4680      	mov	r8, r0
 8001326:	460c      	mov	r4, r1
 8001328:	469a      	mov	sl, r3
 800132a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800132e:	d807      	bhi.n	8001340 <_printf_i+0x28>
 8001330:	2f62      	cmp	r7, #98	@ 0x62
 8001332:	d80a      	bhi.n	800134a <_printf_i+0x32>
 8001334:	2f00      	cmp	r7, #0
 8001336:	f000 80d2 	beq.w	80014de <_printf_i+0x1c6>
 800133a:	2f58      	cmp	r7, #88	@ 0x58
 800133c:	f000 80b9 	beq.w	80014b2 <_printf_i+0x19a>
 8001340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001344:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001348:	e03a      	b.n	80013c0 <_printf_i+0xa8>
 800134a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800134e:	2b15      	cmp	r3, #21
 8001350:	d8f6      	bhi.n	8001340 <_printf_i+0x28>
 8001352:	a101      	add	r1, pc, #4	@ (adr r1, 8001358 <_printf_i+0x40>)
 8001354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001358:	080013b1 	.word	0x080013b1
 800135c:	080013c5 	.word	0x080013c5
 8001360:	08001341 	.word	0x08001341
 8001364:	08001341 	.word	0x08001341
 8001368:	08001341 	.word	0x08001341
 800136c:	08001341 	.word	0x08001341
 8001370:	080013c5 	.word	0x080013c5
 8001374:	08001341 	.word	0x08001341
 8001378:	08001341 	.word	0x08001341
 800137c:	08001341 	.word	0x08001341
 8001380:	08001341 	.word	0x08001341
 8001384:	080014c5 	.word	0x080014c5
 8001388:	080013ef 	.word	0x080013ef
 800138c:	0800147f 	.word	0x0800147f
 8001390:	08001341 	.word	0x08001341
 8001394:	08001341 	.word	0x08001341
 8001398:	080014e7 	.word	0x080014e7
 800139c:	08001341 	.word	0x08001341
 80013a0:	080013ef 	.word	0x080013ef
 80013a4:	08001341 	.word	0x08001341
 80013a8:	08001341 	.word	0x08001341
 80013ac:	08001487 	.word	0x08001487
 80013b0:	6833      	ldr	r3, [r6, #0]
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6032      	str	r2, [r6, #0]
 80013b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80013c0:	2301      	movs	r3, #1
 80013c2:	e09d      	b.n	8001500 <_printf_i+0x1e8>
 80013c4:	6833      	ldr	r3, [r6, #0]
 80013c6:	6820      	ldr	r0, [r4, #0]
 80013c8:	1d19      	adds	r1, r3, #4
 80013ca:	6031      	str	r1, [r6, #0]
 80013cc:	0606      	lsls	r6, r0, #24
 80013ce:	d501      	bpl.n	80013d4 <_printf_i+0xbc>
 80013d0:	681d      	ldr	r5, [r3, #0]
 80013d2:	e003      	b.n	80013dc <_printf_i+0xc4>
 80013d4:	0645      	lsls	r5, r0, #25
 80013d6:	d5fb      	bpl.n	80013d0 <_printf_i+0xb8>
 80013d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013dc:	2d00      	cmp	r5, #0
 80013de:	da03      	bge.n	80013e8 <_printf_i+0xd0>
 80013e0:	232d      	movs	r3, #45	@ 0x2d
 80013e2:	426d      	negs	r5, r5
 80013e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013e8:	4859      	ldr	r0, [pc, #356]	@ (8001550 <_printf_i+0x238>)
 80013ea:	230a      	movs	r3, #10
 80013ec:	e011      	b.n	8001412 <_printf_i+0xfa>
 80013ee:	6821      	ldr	r1, [r4, #0]
 80013f0:	6833      	ldr	r3, [r6, #0]
 80013f2:	0608      	lsls	r0, r1, #24
 80013f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80013f8:	d402      	bmi.n	8001400 <_printf_i+0xe8>
 80013fa:	0649      	lsls	r1, r1, #25
 80013fc:	bf48      	it	mi
 80013fe:	b2ad      	uxthmi	r5, r5
 8001400:	2f6f      	cmp	r7, #111	@ 0x6f
 8001402:	4853      	ldr	r0, [pc, #332]	@ (8001550 <_printf_i+0x238>)
 8001404:	6033      	str	r3, [r6, #0]
 8001406:	bf14      	ite	ne
 8001408:	230a      	movne	r3, #10
 800140a:	2308      	moveq	r3, #8
 800140c:	2100      	movs	r1, #0
 800140e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001412:	6866      	ldr	r6, [r4, #4]
 8001414:	60a6      	str	r6, [r4, #8]
 8001416:	2e00      	cmp	r6, #0
 8001418:	bfa2      	ittt	ge
 800141a:	6821      	ldrge	r1, [r4, #0]
 800141c:	f021 0104 	bicge.w	r1, r1, #4
 8001420:	6021      	strge	r1, [r4, #0]
 8001422:	b90d      	cbnz	r5, 8001428 <_printf_i+0x110>
 8001424:	2e00      	cmp	r6, #0
 8001426:	d04b      	beq.n	80014c0 <_printf_i+0x1a8>
 8001428:	4616      	mov	r6, r2
 800142a:	fbb5 f1f3 	udiv	r1, r5, r3
 800142e:	fb03 5711 	mls	r7, r3, r1, r5
 8001432:	5dc7      	ldrb	r7, [r0, r7]
 8001434:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001438:	462f      	mov	r7, r5
 800143a:	42bb      	cmp	r3, r7
 800143c:	460d      	mov	r5, r1
 800143e:	d9f4      	bls.n	800142a <_printf_i+0x112>
 8001440:	2b08      	cmp	r3, #8
 8001442:	d10b      	bne.n	800145c <_printf_i+0x144>
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	07df      	lsls	r7, r3, #31
 8001448:	d508      	bpl.n	800145c <_printf_i+0x144>
 800144a:	6923      	ldr	r3, [r4, #16]
 800144c:	6861      	ldr	r1, [r4, #4]
 800144e:	4299      	cmp	r1, r3
 8001450:	bfde      	ittt	le
 8001452:	2330      	movle	r3, #48	@ 0x30
 8001454:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001458:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800145c:	1b92      	subs	r2, r2, r6
 800145e:	6122      	str	r2, [r4, #16]
 8001460:	f8cd a000 	str.w	sl, [sp]
 8001464:	464b      	mov	r3, r9
 8001466:	aa03      	add	r2, sp, #12
 8001468:	4621      	mov	r1, r4
 800146a:	4640      	mov	r0, r8
 800146c:	f7ff fee6 	bl	800123c <_printf_common>
 8001470:	3001      	adds	r0, #1
 8001472:	d14a      	bne.n	800150a <_printf_i+0x1f2>
 8001474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001478:	b004      	add	sp, #16
 800147a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	4833      	ldr	r0, [pc, #204]	@ (8001554 <_printf_i+0x23c>)
 8001488:	2778      	movs	r7, #120	@ 0x78
 800148a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	6831      	ldr	r1, [r6, #0]
 8001492:	061f      	lsls	r7, r3, #24
 8001494:	f851 5b04 	ldr.w	r5, [r1], #4
 8001498:	d402      	bmi.n	80014a0 <_printf_i+0x188>
 800149a:	065f      	lsls	r7, r3, #25
 800149c:	bf48      	it	mi
 800149e:	b2ad      	uxthmi	r5, r5
 80014a0:	6031      	str	r1, [r6, #0]
 80014a2:	07d9      	lsls	r1, r3, #31
 80014a4:	bf44      	itt	mi
 80014a6:	f043 0320 	orrmi.w	r3, r3, #32
 80014aa:	6023      	strmi	r3, [r4, #0]
 80014ac:	b11d      	cbz	r5, 80014b6 <_printf_i+0x19e>
 80014ae:	2310      	movs	r3, #16
 80014b0:	e7ac      	b.n	800140c <_printf_i+0xf4>
 80014b2:	4827      	ldr	r0, [pc, #156]	@ (8001550 <_printf_i+0x238>)
 80014b4:	e7e9      	b.n	800148a <_printf_i+0x172>
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	f023 0320 	bic.w	r3, r3, #32
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	e7f6      	b.n	80014ae <_printf_i+0x196>
 80014c0:	4616      	mov	r6, r2
 80014c2:	e7bd      	b.n	8001440 <_printf_i+0x128>
 80014c4:	6833      	ldr	r3, [r6, #0]
 80014c6:	6825      	ldr	r5, [r4, #0]
 80014c8:	6961      	ldr	r1, [r4, #20]
 80014ca:	1d18      	adds	r0, r3, #4
 80014cc:	6030      	str	r0, [r6, #0]
 80014ce:	062e      	lsls	r6, r5, #24
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	d501      	bpl.n	80014d8 <_printf_i+0x1c0>
 80014d4:	6019      	str	r1, [r3, #0]
 80014d6:	e002      	b.n	80014de <_printf_i+0x1c6>
 80014d8:	0668      	lsls	r0, r5, #25
 80014da:	d5fb      	bpl.n	80014d4 <_printf_i+0x1bc>
 80014dc:	8019      	strh	r1, [r3, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	6123      	str	r3, [r4, #16]
 80014e2:	4616      	mov	r6, r2
 80014e4:	e7bc      	b.n	8001460 <_printf_i+0x148>
 80014e6:	6833      	ldr	r3, [r6, #0]
 80014e8:	1d1a      	adds	r2, r3, #4
 80014ea:	6032      	str	r2, [r6, #0]
 80014ec:	681e      	ldr	r6, [r3, #0]
 80014ee:	6862      	ldr	r2, [r4, #4]
 80014f0:	2100      	movs	r1, #0
 80014f2:	4630      	mov	r0, r6
 80014f4:	f7fe fe6c 	bl	80001d0 <memchr>
 80014f8:	b108      	cbz	r0, 80014fe <_printf_i+0x1e6>
 80014fa:	1b80      	subs	r0, r0, r6
 80014fc:	6060      	str	r0, [r4, #4]
 80014fe:	6863      	ldr	r3, [r4, #4]
 8001500:	6123      	str	r3, [r4, #16]
 8001502:	2300      	movs	r3, #0
 8001504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001508:	e7aa      	b.n	8001460 <_printf_i+0x148>
 800150a:	6923      	ldr	r3, [r4, #16]
 800150c:	4632      	mov	r2, r6
 800150e:	4649      	mov	r1, r9
 8001510:	4640      	mov	r0, r8
 8001512:	47d0      	blx	sl
 8001514:	3001      	adds	r0, #1
 8001516:	d0ad      	beq.n	8001474 <_printf_i+0x15c>
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	079b      	lsls	r3, r3, #30
 800151c:	d413      	bmi.n	8001546 <_printf_i+0x22e>
 800151e:	68e0      	ldr	r0, [r4, #12]
 8001520:	9b03      	ldr	r3, [sp, #12]
 8001522:	4298      	cmp	r0, r3
 8001524:	bfb8      	it	lt
 8001526:	4618      	movlt	r0, r3
 8001528:	e7a6      	b.n	8001478 <_printf_i+0x160>
 800152a:	2301      	movs	r3, #1
 800152c:	4632      	mov	r2, r6
 800152e:	4649      	mov	r1, r9
 8001530:	4640      	mov	r0, r8
 8001532:	47d0      	blx	sl
 8001534:	3001      	adds	r0, #1
 8001536:	d09d      	beq.n	8001474 <_printf_i+0x15c>
 8001538:	3501      	adds	r5, #1
 800153a:	68e3      	ldr	r3, [r4, #12]
 800153c:	9903      	ldr	r1, [sp, #12]
 800153e:	1a5b      	subs	r3, r3, r1
 8001540:	42ab      	cmp	r3, r5
 8001542:	dcf2      	bgt.n	800152a <_printf_i+0x212>
 8001544:	e7eb      	b.n	800151e <_printf_i+0x206>
 8001546:	2500      	movs	r5, #0
 8001548:	f104 0619 	add.w	r6, r4, #25
 800154c:	e7f5      	b.n	800153a <_printf_i+0x222>
 800154e:	bf00      	nop
 8001550:	08001674 	.word	0x08001674
 8001554:	08001685 	.word	0x08001685

08001558 <memmove>:
 8001558:	4288      	cmp	r0, r1
 800155a:	b510      	push	{r4, lr}
 800155c:	eb01 0402 	add.w	r4, r1, r2
 8001560:	d902      	bls.n	8001568 <memmove+0x10>
 8001562:	4284      	cmp	r4, r0
 8001564:	4623      	mov	r3, r4
 8001566:	d807      	bhi.n	8001578 <memmove+0x20>
 8001568:	1e43      	subs	r3, r0, #1
 800156a:	42a1      	cmp	r1, r4
 800156c:	d008      	beq.n	8001580 <memmove+0x28>
 800156e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001576:	e7f8      	b.n	800156a <memmove+0x12>
 8001578:	4402      	add	r2, r0
 800157a:	4601      	mov	r1, r0
 800157c:	428a      	cmp	r2, r1
 800157e:	d100      	bne.n	8001582 <memmove+0x2a>
 8001580:	bd10      	pop	{r4, pc}
 8001582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800158a:	e7f7      	b.n	800157c <memmove+0x24>

0800158c <_sbrk_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d06      	ldr	r5, [pc, #24]	@ (80015a8 <_sbrk_r+0x1c>)
 8001590:	2300      	movs	r3, #0
 8001592:	4604      	mov	r4, r0
 8001594:	4608      	mov	r0, r1
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	f7ff fb1e 	bl	8000bd8 <_sbrk>
 800159c:	1c43      	adds	r3, r0, #1
 800159e:	d102      	bne.n	80015a6 <_sbrk_r+0x1a>
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	b103      	cbz	r3, 80015a6 <_sbrk_r+0x1a>
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
 80015a8:	200001ac 	.word	0x200001ac

080015ac <memcpy>:
 80015ac:	440a      	add	r2, r1
 80015ae:	4291      	cmp	r1, r2
 80015b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80015b4:	d100      	bne.n	80015b8 <memcpy+0xc>
 80015b6:	4770      	bx	lr
 80015b8:	b510      	push	{r4, lr}
 80015ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80015be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80015c2:	4291      	cmp	r1, r2
 80015c4:	d1f9      	bne.n	80015ba <memcpy+0xe>
 80015c6:	bd10      	pop	{r4, pc}

080015c8 <_realloc_r>:
 80015c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015cc:	4680      	mov	r8, r0
 80015ce:	4615      	mov	r5, r2
 80015d0:	460c      	mov	r4, r1
 80015d2:	b921      	cbnz	r1, 80015de <_realloc_r+0x16>
 80015d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015d8:	4611      	mov	r1, r2
 80015da:	f7ff bc4b 	b.w	8000e74 <_malloc_r>
 80015de:	b92a      	cbnz	r2, 80015ec <_realloc_r+0x24>
 80015e0:	f7ff fbdc 	bl	8000d9c <_free_r>
 80015e4:	2400      	movs	r4, #0
 80015e6:	4620      	mov	r0, r4
 80015e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ec:	f000 f81a 	bl	8001624 <_malloc_usable_size_r>
 80015f0:	4285      	cmp	r5, r0
 80015f2:	4606      	mov	r6, r0
 80015f4:	d802      	bhi.n	80015fc <_realloc_r+0x34>
 80015f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80015fa:	d8f4      	bhi.n	80015e6 <_realloc_r+0x1e>
 80015fc:	4629      	mov	r1, r5
 80015fe:	4640      	mov	r0, r8
 8001600:	f7ff fc38 	bl	8000e74 <_malloc_r>
 8001604:	4607      	mov	r7, r0
 8001606:	2800      	cmp	r0, #0
 8001608:	d0ec      	beq.n	80015e4 <_realloc_r+0x1c>
 800160a:	42b5      	cmp	r5, r6
 800160c:	462a      	mov	r2, r5
 800160e:	4621      	mov	r1, r4
 8001610:	bf28      	it	cs
 8001612:	4632      	movcs	r2, r6
 8001614:	f7ff ffca 	bl	80015ac <memcpy>
 8001618:	4621      	mov	r1, r4
 800161a:	4640      	mov	r0, r8
 800161c:	f7ff fbbe 	bl	8000d9c <_free_r>
 8001620:	463c      	mov	r4, r7
 8001622:	e7e0      	b.n	80015e6 <_realloc_r+0x1e>

08001624 <_malloc_usable_size_r>:
 8001624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001628:	1f18      	subs	r0, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	bfbc      	itt	lt
 800162e:	580b      	ldrlt	r3, [r1, r0]
 8001630:	18c0      	addlt	r0, r0, r3
 8001632:	4770      	bx	lr

08001634 <_init>:
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	bf00      	nop
 8001638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163a:	bc08      	pop	{r3}
 800163c:	469e      	mov	lr, r3
 800163e:	4770      	bx	lr

08001640 <_fini>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr
